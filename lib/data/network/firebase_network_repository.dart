import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:foodieapp/constants.dart';
import 'package:foodieapp/data/network/network_repository.dart';
import 'package:foodieapp/data/user/user.dart';

import 'connection.dart';

/// A concrete implementation of [NetworkRepository] based on [FirebaseAuth].
///
/// For efficient management of [Connection]s, their unique ids in store are formed
/// using follower and followee's user ids - `followerId_followeeId` - rather than
/// letting them be autogenerated.
///
/// [FirebaseAuth] package internally takes care of caching data,
/// so a separate implementation of [NetworkRepository] for caching is not required.
class FirebaseNetworkRepository implements NetworkRepository {
  final Firestore _store;
  final FirebaseAuth _auth;
  CollectionReference _networkCollection;

  // Getting this from outside makes this class testable
  FirebaseNetworkRepository({
    Firestore storeInstance,
    FirebaseAuth authInstance,
  })  : this._store = storeInstance ?? Firestore.instance,
        this._auth = authInstance ?? FirebaseAuth.instance {
    this._networkCollection = _store.collection(kFirestoreNetwork);
  }

  @override
  Future<void> followUser(User followee) async {
    var currentUser = await this._auth.currentUser();
    if (currentUser == null) {
      throw AuthException(
          'not_logged_in', 'No current user found probably because user is not logged in.');
    }

    final connection = Connection(
      followerId: currentUser.uid,
      followerName: currentUser.displayName,
      followerPhotoUrl: currentUser.photoUrl,
      followeeId: followee.id,
      followeeName: followee.displayName,
      followeePhotoUrl: followee.photoUrl,
      followedAt: DateTime.now(),
    );

    final docId = createDocId(currentUser.uid, followee.id);

    await this._networkCollection.document(docId).setData(connection.toMap());
  }

  @override
  Future<void> unfollowUser(User followee) async {
    var currentUser = await this._auth.currentUser();
    if (currentUser == null) {
      throw AuthException(
          'not_logged_in', 'No current user found probably because user is not logged in.');
    }

    final docId = createDocId(currentUser.uid, followee.id);

    await this._networkCollection.document(docId).delete();
  }

  @override
  Stream<List<Connection>> getFollowers(String userId) {
    final snaps = this._networkCollection.where('followeeId', isEqualTo: userId).snapshots();

    return snaps.map<List<Connection>>(
      (snap) => snap.documents.map<Connection>(
        (doc) {
          return Connection.fromMap(doc.data);
        },
      ).toList(),
    );
  }

  @override
  Stream<List<Connection>> getFollowees(String userId) {
    final snaps = this._networkCollection.where('followerId', isEqualTo: userId).snapshots();

    return snaps.map<List<Connection>>(
      (snap) => snap.documents.map<Connection>(
        (doc) {
          return Connection.fromMap(doc.data);
        },
      ).toList(),
    );
  }

  String createDocId(String followerId, String followeeId) {
    return '${followerId}_$followeeId';
  }
}
